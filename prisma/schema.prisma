generator client {
  provider = "prisma-client-js"
  output   = "../prisma-clients/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cp_logs {
  id        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  cpid      String?   @db.VarChar(255)
  cpsn      String?   @db.VarChar(255)
  log       String?   @db.LongText
  inout     String?   @db.VarChar(45)
  time      DateTime? @db.DateTime(0)
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
}

model guns {
  id               Int        @id @default(autoincrement())
  connector        String?    @db.VarChar(45)
  cpid             String?    @db.VarChar(255)
  cpsn             String?    @db.VarChar(255)
  guns_status      String?    @db.VarChar(45)
  createdAt        DateTime?  @db.Date
  updatedAt        DateTime?  @db.Date
  guns_metervalue1 String?    @db.VarChar(255)
  guns_metervalue2 String?    @db.VarChar(255)
  guns_metervalue3 String?    @db.VarChar(255)
  guns_metervalue4 String?    @db.VarChar(255)
  guns_metervalue5 String?    @db.VarChar(255)
  guns_metervalue6 String?    @db.VarChar(255)
  guns_memo1       String?    @db.VarChar(255)
  guns_memo2       String?    @db.VarChar(255)
  transactionid    String?    @db.VarChar(255)
  acdc             guns_acdc? @default(AC)
  max_kw           Int?       @default(0)
  meter_id         Int
  meter            meters     @relation("meter_guns", fields: [meter_id], references: [id], onDelete: Cascade, map: "fk_guns_meter")

  @@index([meter_id], map: "fk_guns_meter")
}

model stations {
  id           Int      @id @default(autoincrement())
  station_code String   @unique(map: "uniq_station_code") @db.VarChar(50)
  name         String?  @db.VarChar(100)
  address      String?  @db.VarChar(255)
  floor        String?  @db.VarChar(50)
  operator_id  String?  @db.VarChar(50)
  tariff_id    Int?
  updated_at   DateTime @default(now()) @db.DateTime(0)
  meters       meters[] @relation("station_meters")
  tariff       tariffs? @relation("StationTariff", fields: [tariff_id], references: [id], map: "fk_stations_tariff")

  @@index([tariff_id], map: "IX_stations_tariff_id")
}

model meters {
  id           Int      @id @default(autoincrement())
  station_id   Int
  meter_no     String   @db.VarChar(50)
  ems_mode     String   @default("static") @db.VarChar(32)
  max_power_kw Decimal  @default(480.00) @db.Decimal(10, 2)
  billing_mode String?  @db.VarChar(32)
  owner_id     String?  @db.VarChar(50)
  updated_at   DateTime @default(now()) @db.DateTime(0)
  guns         guns[]   @relation("meter_guns")
  station      stations @relation("station_meters", fields: [station_id], references: [id], onDelete: Cascade, map: "fk_meter_station")

  @@unique([station_id, meter_no], map: "uniq_station_meter")
}

model users {
  id        Int      @id @default(autoincrement())
  email     String?  @db.VarChar(255)
  password  String?  @db.VarChar(255)
  role      String?  @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}

model transactions {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  transaction_id    String             @unique(map: "transaction_id") @db.VarChar(50)
  start_time        DateTime           @db.DateTime(0)
  end_time          DateTime?          @db.DateTime(0)
  cpid              String             @db.VarChar(255)
  cpsn              String             @db.VarChar(255)
  connector_id      Int
  user_id           String?            @db.VarChar(100)
  id_tag            String             @db.VarChar(20)
  meter_start       Decimal?           @db.Decimal(10, 3)
  meter_stop        Decimal?           @db.Decimal(10, 3)
  energy_consumed   Decimal?           @db.Decimal(10, 3)
  current_power     Decimal?           @db.Decimal(8, 3)
  current_voltage   Decimal?           @db.Decimal(8, 2)
  current_current   Decimal?           @db.Decimal(8, 2)
  last_meter_update DateTime?          @db.DateTime(0)
  charging_duration Int?
  status            transaction_status @default(ACTIVE)
  stop_reason       String?            @db.VarChar(100)
  createdAt         DateTime           @db.DateTime(0)
  updatedAt         DateTime           @db.DateTime(0)
  billing_records   billing_records[]

  @@index([cpid], map: "idx_cpid")
  @@index([cpsn], map: "idx_cpsn")
  @@index([end_time], map: "idx_end_time")
  @@index([id_tag], map: "idx_id_tag")
  @@index([start_time], map: "idx_start_time")
  @@index([status], map: "idx_status")
  @@index([transaction_id], map: "idx_transaction_id")
}

model tariffs {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(100)
  description         String?           @db.Text
  tariff_type         tariff_type       @default(FIXED_RATE)
  base_price          Decimal           @db.Decimal(10, 2)
  service_fee         Decimal?          @db.Decimal(10, 2)
  minimum_fee         Decimal?          @db.Decimal(10, 2)
  peak_hours_start    String?           @db.VarChar(5)
  peak_hours_end      String?           @db.VarChar(5)
  peak_hours_price    Decimal?          @db.Decimal(10, 2)
  off_peak_price      Decimal?          @db.Decimal(10, 2)
  weekend_price       Decimal?          @db.Decimal(10, 2)
  tier1_max_kwh       Decimal?          @db.Decimal(10, 2)
  tier1_price         Decimal?          @db.Decimal(10, 2)
  tier2_max_kwh       Decimal?          @db.Decimal(10, 2)
  tier2_price         Decimal?          @db.Decimal(10, 2)
  tier3_price         Decimal?          @db.Decimal(10, 2)
  discount_percentage Decimal?          @db.Decimal(5, 2)
  promotion_code      String?           @db.VarChar(50)
  valid_from          DateTime?         @db.DateTime(0)
  valid_to            DateTime?         @db.DateTime(0)
  ac_only             Boolean           @default(false)
  dc_only             Boolean           @default(false)
  membership_required Boolean           @default(false)
  is_active           Boolean           @default(true)
  is_default          Boolean           @default(false)
  created_by          String?           @db.VarChar(100)
  createdAt           DateTime          @default(now()) @db.DateTime(0)
  updatedAt           DateTime          @default(now()) @updatedAt @db.DateTime(0)
  billing_records     billing_records[]
  stations            stations[]        @relation("StationTariff")

  @@index([is_active], map: "idx_is_active")
  @@index([is_default], map: "idx_is_default")
  @@index([name], map: "idx_name")
  @@index([tariff_type], map: "idx_tariff_type")
}

model billing_records {
  id                BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  transaction_id    String            @db.VarChar(50)
  transaction_ref   BigInt?           @db.UnsignedBigInt
  tariff_id         Int
  applied_price     Decimal           @db.Decimal(10, 2)
  energy_consumed   Decimal           @db.Decimal(10, 3)
  energy_fee        Decimal           @db.Decimal(10, 2)
  service_fee       Decimal           @db.Decimal(10, 2)
  discount_amount   Decimal?          @db.Decimal(10, 2)
  tax_amount        Decimal?          @db.Decimal(10, 2)
  total_amount      Decimal           @db.Decimal(10, 2)
  currency          String            @default("TWD") @db.VarChar(3)
  start_time        DateTime          @db.DateTime(0)
  end_time          DateTime          @db.DateTime(0)
  charging_duration Int
  billing_details   String?           @db.Text
  invoice_number    String?           @db.VarChar(20)
  invoice_issued_at DateTime?         @db.DateTime(0)
  payment_method    String?           @db.VarChar(50)
  payment_reference String?           @db.VarChar(100)
  payment_time      DateTime?         @db.DateTime(0)
  user_id           String?           @db.VarChar(100)
  id_tag            String            @db.VarChar(20)
  cpid              String            @db.VarChar(255)
  cpsn              String            @db.VarChar(255)
  connector_id      Int
  status            billing_status    @default(CALCULATED)
  remark            String?           @db.Text
  createdAt         DateTime          @default(now()) @db.DateTime(0)
  updatedAt         DateTime          @default(now()) @updatedAt @db.DateTime(0)
  billing_channels  billing_channels? @relation(fields: [payment_method], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_records_payment_method")
  tariff            tariffs           @relation(fields: [tariff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_records_tariff_id")
  transactions      transactions?     @relation(fields: [transaction_ref], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_billing_records_transaction_ref")

  @@index([payment_method], map: "fk_billing_records_payment_method")
  @@index([transaction_ref], map: "fk_billing_records_transaction_ref")
  @@index([cpid], map: "idx_cpid")
  @@index([id_tag], map: "idx_id_tag")
  @@index([invoice_number], map: "idx_invoice_number")
  @@index([start_time], map: "idx_start_time")
  @@index([status], map: "idx_status")
  @@index([tariff_id], map: "idx_tariff_id")
  @@index([transaction_id], map: "idx_transaction_id")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model billing_channels {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(50)
  code            String            @unique(map: "code") @db.VarChar(30)
  status          Int               @default(1) @db.TinyInt
  config          Json?
  createdAt       DateTime          @default(now()) @db.DateTime(0)
  updatedAt       DateTime          @default(now()) @db.DateTime(0)
  billing_records billing_records[]
}

enum guns_acdc {
  AC
  DC
}

enum transaction_status {
  ACTIVE
  COMPLETED
  STOPPED
  ERROR
  CANCELLED
}

enum tariff_type {
  FIXED_RATE
  TIME_OF_USE
  PROGRESSIVE
  SPECIAL_PROMOTION
  MEMBERSHIP
  CUSTOM
}

enum billing_status {
  PENDING
  CALCULATED
  INVOICED
  PAID
  CANCELLED
  ERROR
}
